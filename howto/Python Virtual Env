If you want to install Python 3.9 and only use it within a venv (virtual environment) on your WSL2 Ubuntu 24, you can follow these steps to install Python 3.9 without changing the system's default Python version. Here's how you can do it:
1. Update Package List

Make sure your package lists are up to date:

sudo apt update

2. Install Dependencies

Install the required dependencies to build Python from source:

sudo apt install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev curl

3. Download Python 3.9 Source Code

Download the Python 3.9 source code from the official Python website.

cd /tmp
curl -O https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz

4. Extract the Archive

Once the file is downloaded, extract it:

tar -xvf Python-3.9.9.tgz
cd Python-3.9.9

5. Configure and Build Python

Now configure and build Python. You can enable optimizations during the build for better performance:

./configure --enable-optimizations
make -j 4  # Use the number of cores available on your system for faster compilation

6. Install Python 3.9 (Without Replacing the Default Python)

Instead of installing globally and replacing the default python3, use altinstall to avoid affecting the system's default Python:

sudo make altinstall

This will install Python 3.9 as python3.9, leaving the default python3 untouched.
7. Create a Virtual Environment Using Python 3.9

After installation, you can create a virtual environment using Python 3.9.

    Install the python3.9-venv package to ensure the venv module is available:

sudo apt install python3.9-venv

Create a new virtual environment in your desired directory:

    python3.9 -m venv myenv

    Replace myenv with the name of your virtual environment.

8. Activate the Virtual Environment

Activate the virtual environment:

source myenv/bin/activate

Now, you are using Python 3.9 within this virtual environment, and any packages you install via pip will be isolated to this environment.
9. Verify the Python Version in the Virtual Environment

To check that you are using the correct Python version inside the virtual environment:

python --version

It should show something like:

Python 3.9.9

10. Deactivate the Virtual Environment

When you're done, you can deactivate the virtual environment by running:

deactivate

Now you have Python 3.9 installed and are using it within a virtual environment, keeping your global Python installation intact!









If you're working with WSL2 running Ubuntu 20.04.6 (which comes with Python 3.8.10 by default), you can follow a similar process to install Python 3.9 and use it in a venv. Here's the step-by-step guide for that setup:
1. Update Package List

Start by updating your package list:

sudo apt update

2. Install Dependencies

Ensure that you have all the required dependencies for building Python from source:

sudo apt install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev curl

3. Download Python 3.9 Source Code

Go to the official Python website and download the Python 3.9 source code.

cd /tmp
curl -O https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz

4. Extract the Archive

Extract the downloaded .tgz file:

tar -xvf Python-3.9.9.tgz
cd Python-3.9.9

5. Configure and Build Python

Configure the build process and compile Python:

./configure --enable-optimizations
make -j 4  # Replace 4 with the number of cores you want to use for faster compilation

6. Install Python 3.9 (Without Replacing System Python)

Install Python 3.9 using altinstall to avoid replacing the default system python3 (which is Python 3.8.10 in Ubuntu 20.04.6):

sudo make altinstall

This will install Python 3.9 as python3.9, leaving the default python3 (Python 3.8) intact.
7. Install python3.9-venv Package

To use python3.9 with virtual environments, you'll need the python3.9-venv package. Install it:

sudo apt install python3.9-venv

8. Create a Virtual Environment Using Python 3.9

Now that Python 3.9 is installed, you can create a virtual environment using that version:

python3.9 -m venv myenv

Replace myenv with the name of your desired virtual environment folder.
9. Activate the Virtual Environment

Activate the newly created virtual environment:

source myenv/bin/activate

10. Verify the Python Version in the Virtual Environment

Once activated, check that you are using Python 3.9 in the virtual environment:

python --version

It should show something like:

Python 3.9.9

11. Deactivate the Virtual Environment

When you're done working in the virtual environment, you can deactivate it by running:

deactivate

Summary:

    You've installed Python 3.9 alongside the default Python 3.8 on Ubuntu 20.04.6.
    You can now create and use virtual environments with Python 3.9 while keeping the systemâ€™s default Python version intact.

This approach ensures that you're working within a specific version of Python when needed but won't affect your system's default Python version.
